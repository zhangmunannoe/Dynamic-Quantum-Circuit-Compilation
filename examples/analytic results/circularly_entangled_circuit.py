"""
Qubit-reuse-optimal compilation of circularly entangled circuit.
"""

import numpy
from functools import reduce
from quantum.circuit import Circuit

# Since dynamic circuit compilation is independent of the type of two-qubit gates,
# all two-qubit gates are implemented as controlled-NOT gates.

# Set the number of qubits and entanglement layers
qubit_num = 6
layer_num = 1

# Create a quantum circuit
cir = Circuit("Circularly entangled circuit")

# Construct circularly entangled circuit
for i in range(layer_num):
    # Single qubit rotation layer, rotation gates can be arbitrarily selected
    for j in range(qubit_num):
        cir.h(j)
    # Entanglement layer
    for j in range(qubit_num - 1):
        cir.cx([j, j + 1])
    cir.cx([qubit_num - 1, 0])

# Measure all qubits
cir.measure()
# Print quantum circuit
cir.print_circuit()


# Get the biadjacency matrix and the candidate matrix of the simplified graph
# of the quantum circuit through boolean matrix multiplication
b_circuit, c_circuit = cir.get_biadjacency_and_candidate_matrices(method="boolean_matrix")

# Construct the biadjacency matrix based on theoretical analysis.
b_theory = numpy.zeros((qubit_num, qubit_num), dtype=int)
for i in range(0, qubit_num):
    for j in range(max(i - 2, 0), qubit_num):
        b_theory[i][(j + 1) % qubit_num] += 1

# Verify if two biadjacency matrices generated by different approaches are identical
b_difference = b_circuit - b_theory
print("\nThe biadjacency matrices generated by different approaches are identical:", numpy.all(b_difference == 0))

# We can also verify that the circularly entangled circuit with two or more layers is irreducible
b_2 = numpy.dot(b_theory.astype(bool), b_theory.astype(bool)).astype(int)
print(
    "\nThe biadjacency matrix of circularly entangled circuit with two layers is an all-one matrix:",
    numpy.all(b_2 == 1),
)

# Construct the candidate matrix based on theoretical analysis.
c_theory = numpy.zeros((qubit_num, qubit_num), dtype=int)
for i in range(1, qubit_num - 2):
    for j in range(i + 2, qubit_num):
        c_theory[i][j] += 1

# Verify if two candidate matrices generated by different approaches are identical
c_difference = c_circuit - c_theory
print("\nThe candidate matrices generated by different approaches are identical:", numpy.all(c_difference == 0))


# Construct the matrix corresponding to the added edges in the optimal compilation
op_matrix = numpy.zeros([qubit_num, qubit_num], dtype=int)
for i in range(1, qubit_num - 2):
    op_matrix[i][i + 2] += 1

# Construct the adjacency matrix corresponding to the optimal compilation
zero_matrix = numpy.zeros([qubit_num, qubit_num], dtype=int)
adjacency_matrix = numpy.block([[zero_matrix, b_circuit], [op_matrix, zero_matrix]])

# Iteratively calculate the power of the adjacency matrix
nilpotent = reduce(numpy.matmul, [adjacency_matrix for _ in range(2 * qubit_num)])

# Check whether the adjacency matrix corresponding to the optimal compilation is nilpotent
print("\nThe adjacency matrix corresponding to the optimal compilation is nilpotent:", numpy.all(nilpotent == 0))
