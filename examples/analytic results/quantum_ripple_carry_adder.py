"""
Qubit-reuse-optimal compilation of quantum ripple carry adder circuits.
"""

import numpy
from functools import reduce
from quantum.circuit import Circuit

# Set the length of bit strings for addition
bit_num = 2
# A k-bit quantum adder needs 3*k+1 qubits
qubit_num = 3 * bit_num + 1

# Create a quantum circuit
cir = Circuit("Quantum ripple carry adder")

# Construct the n-bit quantum ripple carry adder
for i in range(bit_num):
    cir.ccx([3 * i + 1, 3 * i + 2, 3 * i + 3])
    cir.cx([3 * i + 1, 3 * i + 2])
for i in range(bit_num):
    cir.ccx([3 * i, 3 * i + 2, 3 * i + 3])
for i in range(bit_num):
    cir.cx([3 * i, 3 * i + 2])

# Measure all qubits
cir.measure()
# Print quantum circuit
cir.print_circuit()


# Get the biadjacency matrix and the candidate matrix of the simplified graph
# of the quantum circuit through boolean matrix multiplication
b_circuit, c_circuit = cir.get_biadjacency_and_candidate_matrices(method="boolean_matrix")

# Construct the biadjacency matrix based on theoretical analysis.
b_theory = numpy.zeros((qubit_num, qubit_num), dtype=int)
for i in range(0, 4):
    for j in range(0, qubit_num):
        b_theory[i][j] += 1
for m in range(1, bit_num):
    for i in range(3 * m + 1, 3 * m + 4):
        for j in range(3 * m, qubit_num):
            b_theory[i][j] += 1
for j in range(0, bit_num):
    for i in range(0, 3 * j + 1):
        b_theory[i][3 * j + 1] -= 1

# Verify if two biadjacency matrices generated by different approaches are identical
b_difference = b_circuit - b_theory
print("\nThe biadjacency matrices generated by different approaches are identical:", numpy.all(b_difference == 0))

# Construct the candidate matrix based on theoretical analysis.
c_theory = numpy.zeros((qubit_num, qubit_num), dtype=int)
for i in range(1, bit_num + 1):
    for j in range(0, qubit_num - 3 * i):
        c_theory[qubit_num - 3 * i][j] += 1
for m in range(0, bit_num - 1):
    for i in range(3 * m, 3 * m + 3):
        for j in range(3 * m + 4, qubit_num):
            c_theory[i][j] += 1

# Verify if two candidate matrices generated by different approaches are identical
c_difference = c_circuit - c_theory
print("\nThe candidate matrices generated by different approaches are identical:", numpy.all(c_difference == 0))


# Construct the matrix corresponding to the added edges in the optimal compilation
op_matrix = numpy.zeros([qubit_num, qubit_num], dtype=int)
for i in range(0, qubit_num - 4):
    op_matrix[i][i + 4] += 1

# Construct the adjacency matrix corresponding to the optimal compilation
zero_matrix = numpy.zeros([qubit_num, qubit_num], dtype=int)
adjacency_matrix = numpy.block([[zero_matrix, b_circuit], [op_matrix, zero_matrix]])

# Iteratively calculate the power of the adjacency matrix
nilpotent = reduce(numpy.matmul, [adjacency_matrix for _ in range(2 * qubit_num)])

# Check whether the adjacency matrix corresponding to the optimal compilation is nilpotent
print("\nThe adjacency matrix corresponding to the optimal compilation is nilpotent:", numpy.all(nilpotent == 0))
